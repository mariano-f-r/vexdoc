name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # Matches tags following semantic versioning (e.g., v1.0.0)

jobs:
  build:
    name: Build Project
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        run: rustup update stable

      - name: Build project
        run: cargo build --release

      - name: Rename release binary
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv target/release/my_project release-x86_64-unknown-linux-gnu
          else
            mv target/release/my_project.exe release-x86_64-pc-windows-msvc.exe
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc' }}
          path: ${{ matrix.os == 'ubuntu-latest' && 'release-x86_64-unknown-linux-gnu' || 'release-x86_64-pc-windows-msvc.exe' }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: release-x86_64-unknown-linux-gnu
          path: ./linux
      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: release-x86_64-pc-windows-msvc
          path: ./windows

      - name: Determine if pre-release
        id: pre_release
        run: |
          if [[ "${GITHUB_REF}" =~ -rc[0-9]+$ ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
          else
            echo "pre_release=false" >> $GITHUB_ENV
          fi

      - name: Get release notes
        id: get_release_notes
        run: echo "::set-output name=notes::$(git tag -l --format='%(contents)' $GITHUB_REF)"

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: ${{ steps.get_release_notes.outputs.notes }}
          draft: false
          prerelease: ${{ env.pre_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux binary
        uses: softprops/action-gh-release@v2
        with:
          files: ./linux/release-x86_64-unknown-linux-gnu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary
        uses: softprops/action-gh-release@v2
        with:
          files: ./windows/release-x86_64-pc-windows-msvc.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

